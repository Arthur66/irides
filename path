. tests/test_helpers.py::test_get_hash_algorithm[SHA256-sha256_crypt]
. tests/test_helpers.py::test_get_hash_algorithm[SHA512-sha512_crypt]
. tests/test_helpers.py::test_get_hash_algorithm_invalid_hash_alg[12345-The parameter "hash_algorithm" should be a string.]
. tests/test_helpers.py::test_get_hash_algorithm_invalid_hash_alg[INVALID NAME-Invalid hash method.]
E tests/test_helpers.py::test_encrypt_password
 request = <SubRequest 'app' for <Function 'test_encrypt_password'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
F tests/test_helpers.py::test_verify_password
 def test_verify_password():
     
 >       hash = helpers.encrypt_password("password")
 
 tests\test_helpers.py:86: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\helpers.py:55: in encrypt_password
     method = get_hash_algorithm(flask.current_app.config['HASH_ALGORITHM'])
 c:\python36\lib\site-packages\werkzeug\local.py:347: in __getattr__
     return getattr(self._get_current_object(), name)
 c:\python36\lib\site-packages\werkzeug\local.py:306: in _get_current_object
     return self.__local()
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
     def _find_app():
         top = _app_ctx_stack.top
         if top is None:
 >           raise RuntimeError(_app_ctx_err_msg)
 E           RuntimeError: Working outside of application context.
 E           
 E           This typically means that you attempted to use functionality that needed
 E           to interface with the current application object in a way.  To solve
 E           this set up an application context with app.app_context().  See the
 E           documentation for more information.
 
 c:\python36\lib\site-packages\flask\globals.py:51: RuntimeError
. tests/test_helpers.py::test_standardize_api_response_invalid_result_key
. tests/test_helpers.py::test_standardize_api_response_valid_result_key[function0-expected0]
. tests/test_helpers.py::test_standardize_api_response_valid_result_key[function1-expected1]
. tests/test_helpers.py::test_standardize_api_response_valid_result_key[function2-expected2]
. tests/test_helpers.py::test_standardize_api_response_valid_result_key[function3-expected3]
. tests/test_helpers.py::test_standardize_api_response_valid_result_key[function4-expected4]
F tests/test_utils.py::test_is_a_valid_object_id[value0-True]
 value = ObjectId('5979c6cdac51de1dd4a4150b'), expected = True
 
     @pytest.mark.parametrize('value, expected', object_id_scenarios)
     def test_is_a_valid_object_id(value, expected):
 >       utils.is_a_valid_object_id(value) is expected
 E       AttributeError: module 'app.utils' has no attribute 'is_a_valid_object_id'
 
 tests\test_utils.py:18: AttributeError
F tests/test_utils.py::test_is_a_valid_object_id[5979c6cdac51de1dd4a4150c-True]
 value = '5979c6cdac51de1dd4a4150c', expected = True
 
     @pytest.mark.parametrize('value, expected', object_id_scenarios)
     def test_is_a_valid_object_id(value, expected):
 >       utils.is_a_valid_object_id(value) is expected
 E       AttributeError: module 'app.utils' has no attribute 'is_a_valid_object_id'
 
 tests\test_utils.py:18: AttributeError
F tests/test_utils.py::test_is_a_valid_object_id[invalid-False]
 value = 'invalid', expected = False
 
     @pytest.mark.parametrize('value, expected', object_id_scenarios)
     def test_is_a_valid_object_id(value, expected):
 >       utils.is_a_valid_object_id(value) is expected
 E       AttributeError: module 'app.utils' has no attribute 'is_a_valid_object_id'
 
 tests\test_utils.py:18: AttributeError
F tests/test_utils.py::test_is_a_valid_object_id[11002299338844775566-False]
 value = '11002299338844775566', expected = False
 
     @pytest.mark.parametrize('value, expected', object_id_scenarios)
     def test_is_a_valid_object_id(value, expected):
 >       utils.is_a_valid_object_id(value) is expected
 E       AttributeError: module 'app.utils' has no attribute 'is_a_valid_object_id'
 
 tests\test_utils.py:18: AttributeError
F tests/test_utils.py::test_is_a_valid_object_id[1234567890-False]
 value = 1234567890, expected = False
 
     @pytest.mark.parametrize('value, expected', object_id_scenarios)
     def test_is_a_valid_object_id(value, expected):
 >       utils.is_a_valid_object_id(value) is expected
 E       AttributeError: module 'app.utils' has no attribute 'is_a_valid_object_id'
 
 tests\test_utils.py:18: AttributeError
F tests/test_utils.py::test_is_a_valid_object_id[value5-False]
 value = [], expected = False
 
     @pytest.mark.parametrize('value, expected', object_id_scenarios)
     def test_is_a_valid_object_id(value, expected):
 >       utils.is_a_valid_object_id(value) is expected
 E       AttributeError: module 'app.utils' has no attribute 'is_a_valid_object_id'
 
 tests\test_utils.py:18: AttributeError
E tests/integration/test_users_api.py::test_unauthorized_request[GET-/api/users-Authorization Required-401]
 request = <SubRequest 'app' for <Function 'test_unauthorized_request[GET-/api/users-Authorization Required-401]'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/integration/test_users_api.py::test_get_users_without_username
 request = <SubRequest 'app' for <Function 'test_unauthorized_request[GET-/api/users-Authorization Required-401]'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/integration/test_users_api.py::test_get_users_specifing_username
 request = <SubRequest 'app' for <Function 'test_unauthorized_request[GET-/api/users-Authorization Required-401]'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/integration/test_users_api.py::test_create_an_user_invalid_username
 request = <SubRequest 'app' for <Function 'test_unauthorized_request[GET-/api/users-Authorization Required-401]'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/integration/test_users_api.py::test_create_an_user_valid_username
 request = <SubRequest 'app' for <Function 'test_unauthorized_request[GET-/api/users-Authorization Required-401]'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/integration/test_users_api.py::test_update_an_user_invalid_username
 request = <SubRequest 'app' for <Function 'test_unauthorized_request[GET-/api/users-Authorization Required-401]'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/integration/test_users_api.py::test_update_an_user_valid_username
 request = <SubRequest 'app' for <Function 'test_unauthorized_request[GET-/api/users-Authorization Required-401]'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/integration/test_users_api.py::test_delete_an_user_valid_user_id
 request = <SubRequest 'app' for <Function 'test_unauthorized_request[GET-/api/users-Authorization Required-401]'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/unit/test_users_controllers.py::test_is_an_available_username_with_available_user
 request = <SubRequest 'app' for <Function 'test_is_an_available_username_with_available_user'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/unit/test_users_controllers.py::test_is_an_available_username_with_unavailable_user
 request = <SubRequest 'app' for <Function 'test_is_an_available_username_with_available_user'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/unit/test_users_controllers.py::test_get_users_no_data
 request = <SubRequest 'app' for <Function 'test_is_an_available_username_with_available_user'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/unit/test_users_controllers.py::test_get_users_with_data
 request = <SubRequest 'app' for <Function 'test_is_an_available_username_with_available_user'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/unit/test_users_controllers.py::test_get_users_with_data_and_specific_username
 request = <SubRequest 'app' for <Function 'test_is_an_available_username_with_available_user'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/unit/test_users_controllers.py::test_create_user_with_invalid_username
 request = <SubRequest 'app' for <Function 'test_is_an_available_username_with_available_user'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/unit/test_users_controllers.py::test_create_user_with_valid_username
 request = <SubRequest 'app' for <Function 'test_is_an_available_username_with_available_user'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/unit/test_users_controllers.py::test_update_user_with_valid_username
 request = <SubRequest 'app' for <Function 'test_is_an_available_username_with_available_user'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
E tests/unit/test_users_controllers.py::test_delete_user_with_valid_id
 request = <SubRequest 'app' for <Function 'test_is_an_available_username_with_available_user'>>
 
     @pytest.fixture(scope='module')
     def app(request):
         """Creates a flask.Flask app with the 'development' config/context.
     
         :request: test request
         :returns: flask.Flask object
     
         """
     
 >       app = create_app('development')
 
 tests\conftest.py:14: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 app\__init__.py:19: in create_app
     register_extensions(app)
 app\__init__.py:36: in register_extensions
     extensions.jwt.init_app(app)
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <flask_jwt.JWT object at 0x000000AF1217D358>, app = <Flask 'app'>
 
     def init_app(self, app):
         for k, v in CONFIG_DEFAULTS.items():
             app.config.setdefault(k, v)
         app.config.setdefault('JWT_SECRET_KEY', app.config['SECRET_KEY'])
     
         auth_url_rule = app.config.get('JWT_AUTH_URL_RULE', None)
     
         if auth_url_rule:
             if self.auth_request_callback == _default_auth_request_handler:
                 assert self.authentication_callback is not None, (
 >                   'an authentication_handler function must be defined when using the built in '
                     'authentication resource')
 E               AssertionError: an authentication_handler function must be defined when using the built in authentication resource
 
 c:\python36\lib\site-packages\flask_jwt\__init__.py:228: AssertionError
